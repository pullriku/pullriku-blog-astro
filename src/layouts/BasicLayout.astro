---
import "@styles/global.css";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import {
    BLOG_NAME,
    DARK_BG,
    LIGHT_BG,
    DEFAULT_OGP_IMAGE_PATH,
} from "@lib/consts";
import type { NavigationProps } from "@components/Navigation.astro";
import type { ImageMetadata } from "astro";
import { ogpImagePath } from "@lib/ogp";

export interface MetaContent {
    title?: string;
    desc?: string;
    slug?: string;
    keywords?: string[];
    canonicalUrl?: string;
    additionalSchemas?: any[];
}

type Props = MetaContent & NavigationProps;

const {
    title,
    desc = "pullrikuによるテックブログ",
    slug,
    keywords,
    canonicalUrl,
    selectedPage,
    additionalSchemas = [],
} = Astro.props;
const titleWithBlogName = title ? `${title} | ${BLOG_NAME}` : BLOG_NAME;
const ogImagePath = slug ? ogpImagePath(slug) : DEFAULT_OGP_IMAGE_PATH;

export const headerPadding = "7";

const schemaWebSite = {
    "@context": "https://schema.org/",
    "@type": "WebSite",
    name: BLOG_NAME,
    url: Astro.site?.origin,
};

export async function getDefaultOgpImage(): Promise<ImageMetadata> {
    const defaultMatch = import.meta.glob<{ default: ImageMetadata }>(
        "/public/og-image.png",
    );
    return (await defaultMatch["/public/og-image.png"]()).default;
}

export async function getCover(
    slug: string,
): Promise<ImageMetadata | undefined> {
    const pngsRecord = import.meta.glob<{ default: ImageMetadata }>(
        "/src/assets/covers/*.{png,jpg,jpeg}",
    );
    const pngs = Object.entries(pngsRecord);

    for (let [key, image] of pngs) {
        if (key.split("/").pop()?.split(".")[0] === slug) {
            return (await image()).default;
        }
    }
    return undefined;
}

export async function getCoverPath(slug: string): Promise<string | undefined> {
    const pngsRecord = import.meta.glob<{ default: ImageMetadata }>(
        "/src/assets/covers/*.{png,jpg,jpeg}",
    );
    const pngs = Object.entries(pngsRecord);

    for (let [key, _image] of pngs) {
        if (key.split("/").pop()?.split(".")[0] === slug) {
            return key.replace("/public", "");
        }
    }
    return undefined;
}
---
<!doctype html>
<html lang="ja" class={`${LIGHT_BG} ${DARK_BG} dark:text-white`}>
    <head prefix="og: https://ogp.me/ns#">
        {
            import.meta.env.PROD &&
            (
            <script is:inline type="text/partytown" async src="https://www.googletagmanager.com/gtag/js?id=G-WHKGHT54BS"></script>
            <script is:inline type="text/partytown">
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());

                gtag('config', 'G-WHKGHT54BS');
            </script>
            )
        }

        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <meta name="description" content={desc}>

        {
            Astro.url.pathname === "/" && (
                <script is:inline type="application/ld+json" set:html={JSON.stringify(schemaWebSite)}></script>
            )
        }

        {
            additionalSchemas.map((schema) => (
                <script is:inline type="application/ld+json" set:html={JSON.stringify(schema)}></script>
            ))
        }

        {
            canonicalUrl && (
                <link rel="canonical" href={canonicalUrl}>
            )
        }

        {
            keywords && (
                <meta name="keywords" content={keywords.join(",")}>
            )
        }

        {/* favicon */}
        <link rel="icon" type="image/png" href="/favicon/favicon-96x96.png" sizes="96x96" />
        <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
        <link rel="shortcut icon" href="/favicon/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png" />
        <meta name="apple-mobile-web-app-title" content="pullriku" />
        <link rel="manifest" href="/favicon/site.webmanifest" />

        {/* OGPの設定 */}
        <meta property="og:title" content={title}>
        <meta property="og:type" content={slug ? "article" : "blog"}>
        <meta property="og:url" content={Astro.url}>
        <meta property="og:image" content={`${Astro.url.protocol}//${Astro.url.host}${ogImagePath}`}>
        <meta property="og:site_name" content={BLOG_NAME}>
        <meta property="og:description" content={desc ?? "pullrikuによる技術ブログです。"}>
        <meta property="og:locale" content="ja_JP">
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:site" content="@pullriku">

        <title>{titleWithBlogName}</title>
    </head>
    <body>
        <Header selectedPage={selectedPage} />
        <div class="py-2">
            <slot />
        </div>
        <Footer />
    </body>
</html>

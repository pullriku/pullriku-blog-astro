---
import type { AstroInstance, GetStaticPaths } from "astro";
import { type CollectionEntry } from "astro:content";
import BasicLayout, { getCoverPath } from "../../layouts/BasicLayout.astro";
import Prose from "../../layouts/Prose.astro";
import { Image } from "astro:assets";

import { getAllPosts } from "../../lib/util";
import { DARK_BG, LIGHT_OVERLAY } from "../../lib/consts";
import Tag from "../../components/Tag.astro";
import RoundedBox from "../../layouts/RoundedBox.astro";
import { zennUrl } from "../../lib/foreign";
import ServiceIcon from "../../components/ServiceIcon.astro";
import { ogpImagePath } from "../../lib/ogp";
import { getCover } from "../../layouts/BasicLayout.astro";

export const getStaticPaths = (async () => {
    const posts = await getAllPosts();

    return (
        posts.map((post) => ({
            params: {
                slug: post.slug,
            },
            props: post,
        })) ?? []
    );
}) satisfies GetStaticPaths;

type Props = CollectionEntry<"posts">;
const post = Astro.props;

const { Content, headings } = await post.render();
const willSubtractDepth = !headings.map((heading) => heading.depth).includes(1);
if (willSubtractDepth) {
    headings.forEach((heading) => {
        heading.depth -= 1;
    });
}

// const coverImage = (await getCover(post.slug))?.src ?? await ogpImagePath(post.slug);
const coverImageOpt = await getCover(post.slug);
const ogpImageUrl = await ogpImagePath(post.slug);
---
<BasicLayout title={post.data.title} desc={post.data.desc}, canonicalUrl={post.data.zenn ? zennUrl(post.slug) : undefined} slug={post.slug} keywords={post.data.tags}>
    <div class="px-0 md:px-4">
        <div class="mx-auto justify-center lg:flex gap-10">
            { /* 記事の列 */ }
            <div class="max-w-4xl min-w-0 flex-1 lg:mx-0 lg:w-fit break-words mx-auto">
                <div class="h-16 px-4 md:px-0 overflow-x-scroll flex flex-row">
                    {
                        // タグ
                        (post.data.tags ?? []).map((tag) => (
                            <RoundedBox>
                                <Tag tag={tag} count={undefined} />
                            </RoundedBox>
                        ))
                    }
                </div>
                <div class={` p-4 md:p-12 pt-5 mx-auto ${LIGHT_OVERLAY} ${DARK_BG} rounded-lg`}>
                    <a href={coverImageOpt?.src ?? ogpImageUrl} target="_blank" class="block w-fit mx-auto">
                        {
                            coverImageOpt && (
                                <Image
                                    src={coverImageOpt}
                                    alt={`記事「${post.data.title}」のサムネイル`}
                                    width={208}
                                    height={208}
                                    class="drop-shadow-md rounded-lg hover:scale-110 transition"
                                />
                            )
                        }
                        {
                            !coverImageOpt && (
                                <Image 
                                    src={ogpImageUrl}
                                    alt={`記事「${post.data.title}」のサムネイル`}
                                    width={208}
                                    height={208}
                                    class="drop-shadow-md rounded-lg hover:scale-110 transition" 
                                />
                            )
                        }
                    </a>
                    <div>
                         <div class="py-10">
                            <h1 class="text-4xl font-bold">{post.data.title}</h1>
                            <time datetime={post.data.pubDate.toISOString()} class="text-gray-500 block">公開日: {post.data.pubDate.toISOString().split('T')[0]}</time>
                            {
                                post.data.updatedDate ? (
                                    <time datetime={post.data.updatedDate.toISOString()} class="text-gray-500 block">更新日: {post.data.updatedDate.toISOString().split("T")[0]}</time>
                                ) : null
                            }
                         </div>
                        
                            {
                                post.data.zenn
                                    ? (
                                        <div class="flex flex-row items-center">
                                            <ServiceIcon href={zennUrl(post.slug)} name="simple-icons:zenn" width={24} height={24} />
                                            <a href={zennUrl(post.slug)}><p class="text-gray-500">外部サイト(Zenn)</p></a>
                                        </div>)
                                    : <Prose><Content /></Prose>
                            }
                    </div>
                    <div class="mt-8">
                        <script src="https://giscus.app/client.js"
                        data-repo="pullriku/pullriku-blog-astro"
                        data-repo-id="R_kgDONbFLiw"
                        data-category="Announcements"
                        data-category-id="DIC_kwDONbFLi84Cm5cH"
                        data-mapping="og:title"
                        data-strict="0"
                        data-reactions-enabled="0"
                        data-emit-metadata="0"
                        data-input-position="top"
                        data-theme="preferred_color_scheme"
                        data-lang="ja"
                        data-loading="lazy"
                        crossorigin="anonymous"
                        async />
                    </div>
                </div>
            </div>
            { /* 目次の列（スクロールのためのコンテナ） */ }
            <div class={"lg:h-auto lg:w-72 hidden lg:block" + (post.data.zenn ? "hidden" : "")}>
                <div class="h-16">{/* 空のコンテナ */}</div>
                { /* 目次 */ }
                <div class="
                    hidden lg:block
                    top-10 p-4
                    break-words overflow-scroll
                    max-h-80-lvh sticky
                    border-2 border-gray-400 dark:border-gray-600 rounded-lg dark:bg-slate-800
                ">
                <p class="text-center">目次</p>
                <hr class="m-4 border-cyan-500 dark:border-cyan-800 text-left" />
                    {
                        headings.map((heading) => (
                            <a href={`#${heading.slug}`} class="block hover:underline">
                                {
                                    // 見出しレベルに応じたインデント
                                    heading.depth === 1
                                        ? <span class="block text-base font-bold">{heading.text}</span>
                                        : heading.depth === 2
                                            ? <span class="block text-base indent-4">{heading.text}</span>
                                            : heading.depth === 3
                                                ? <span class="block text-base indent-8">{heading.text}</span>
                                                : heading.depth === 4
                                                    ? <span class="block text-base indent-12">{heading.text}</span>
                                                    : <span class="block text-base indent-12">{heading.text}</span>
                                }
                            </a>
                        ))
                    }
                </div>
            </div>
        </div>
    </div>
</BasicLayout>
<style is:global>
    @import "tailwindcss";
    @plugin "@tailwindcss/typography";
    @config "../../../tailwind.config.mjs";

    .max-h-80-lvh {
        max-height: 80vh;
    }

    .remark-code-title {
        @apply text-base pl-3 rounded-t-lg font-bold bg-slate-600 text-white
    }
    .remark-code-title+pre {
        @apply mt-0 rounded-t-none;
    }
</style>
